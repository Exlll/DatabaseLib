package de.exlll.databaselib.sql;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class DummyConnection implements Connection {
    private DummyStatement lastStatement;

    public DummyStatement getLastStatement() {
        return lastStatement;
    }

    public static class DummyStatement implements Statement {
        private final List<String> executedQueries = new ArrayList<>();

        public List<String> getExecutedQueries() {
            return executedQueries;
        }

        @Override
        public ResultSet executeQuery(String sql) {
            return null;
        }

        @Override
        public int executeUpdate(String sql) {
            return 0;
        }

        @Override
        public void close() {

        }

        @Override
        public int getMaxFieldSize() {
            return 0;
        }

        @Override
        public void setMaxFieldSize(int max) {

        }

        @Override
        public int getMaxRows() {
            return 0;
        }

        @Override
        public void setMaxRows(int max) {

        }

        @Override
        public void setEscapeProcessing(boolean enable) {

        }

        @Override
        public int getQueryTimeout() {
            return 0;
        }

        @Override
        public void setQueryTimeout(int seconds) {

        }

        @Override
        public void cancel() {

        }

        @Override
        public SQLWarning getWarnings() {
            return null;
        }

        @Override
        public void clearWarnings() {

        }

        @Override
        public void setCursorName(String name) {

        }

        @Override
        public boolean execute(String sql) {
            return executedQueries.add(sql);
        }

        @Override
        public ResultSet getResultSet() {
            return null;
        }

        @Override
        public int getUpdateCount() {
            return 0;
        }

        @Override
        public boolean getMoreResults() {
            return false;
        }

        @Override
        public void setFetchDirection(int direction) {

        }

        @Override
        public int getFetchDirection() {
            return 0;
        }

        @Override
        public void setFetchSize(int rows) {

        }

        @Override
        public int getFetchSize() {
            return 0;
        }

        @Override
        public int getResultSetConcurrency() {
            return 0;
        }

        @Override
        public int getResultSetType() {
            return 0;
        }

        @Override
        public void addBatch(String sql) {

        }

        @Override
        public void clearBatch() {

        }

        @Override
        public int[] executeBatch() {
            return new int[0];
        }

        @Override
        public Connection getConnection() {
            return null;
        }

        @Override
        public boolean getMoreResults(int current) {
            return false;
        }

        @Override
        public ResultSet getGeneratedKeys() {
            return null;
        }

        @Override
        public int executeUpdate(String sql, int autoGeneratedKeys) {
            return 0;
        }

        @Override
        public int executeUpdate(String sql, int[] columnIndexes) {
            return 0;
        }

        @Override
        public int executeUpdate(String sql, String[] columnNames) {
            return 0;
        }

        @Override
        public boolean execute(String sql, int autoGeneratedKeys) {
            return false;
        }

        @Override
        public boolean execute(String sql, int[] columnIndexes) {
            return false;
        }

        @Override
        public boolean execute(String sql, String[] columnNames) {
            return false;
        }

        @Override
        public int getResultSetHoldability() {
            return 0;
        }

        @Override
        public boolean isClosed() {
            return false;
        }

        @Override
        public void setPoolable(boolean poolable) {

        }

        @Override
        public boolean isPoolable() {
            return false;
        }

        @Override
        public void closeOnCompletion() {

        }

        @Override
        public boolean isCloseOnCompletion() {
            return false;
        }

        @Override
        public <T> T unwrap(Class<T> iface) {
            return null;
        }

        @Override
        public boolean isWrapperFor(Class<?> iface) {
            return false;
        }
    }


    @Override
    public Statement createStatement() {
        return this.lastStatement = new DummyStatement();
    }

    @Override
    public PreparedStatement prepareStatement(String sql) {
        return null;
    }

    @Override
    public CallableStatement prepareCall(String sql) {
        return null;
    }

    @Override
    public String nativeSQL(String sql) {
        return null;
    }

    @Override
    public void setAutoCommit(boolean autoCommit) {

    }

    @Override
    public boolean getAutoCommit() {
        return false;
    }

    @Override
    public void commit() {

    }

    @Override
    public void rollback() {

    }

    @Override
    public void close() {

    }

    @Override
    public boolean isClosed() {
        return false;
    }

    @Override
    public DatabaseMetaData getMetaData() {
        return null;
    }

    @Override
    public void setReadOnly(boolean readOnly) {

    }

    @Override
    public boolean isReadOnly() {
        return false;
    }

    @Override
    public void setCatalog(String catalog) {

    }

    @Override
    public String getCatalog() {
        return null;
    }

    @Override
    public void setTransactionIsolation(int level) {

    }

    @Override
    public int getTransactionIsolation() {
        return 0;
    }

    @Override
    public SQLWarning getWarnings() {
        return null;
    }

    @Override
    public void clearWarnings() {

    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) {
        return null;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) {
        return null;
    }

    @Override
    public Map<String, Class<?>> getTypeMap() {
        return null;
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) {

    }

    @Override
    public void setHoldability(int holdability) {

    }

    @Override
    public int getHoldability() {
        return 0;
    }

    @Override
    public Savepoint setSavepoint() {
        return null;
    }

    @Override
    public Savepoint setSavepoint(String name) {
        return null;
    }

    @Override
    public void rollback(Savepoint savepoint) {

    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) {

    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        return null;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) {
        return null;
    }

    @Override
    public Clob createClob() {
        return null;
    }

    @Override
    public Blob createBlob() {
        return null;
    }

    @Override
    public NClob createNClob() {
        return null;
    }

    @Override
    public SQLXML createSQLXML() {
        return null;
    }

    @Override
    public boolean isValid(int timeout) {
        return false;
    }

    @Override
    public void setClientInfo(String name, String value) {

    }

    @Override
    public void setClientInfo(Properties properties) {

    }

    @Override
    public String getClientInfo(String name) {
        return null;
    }

    @Override
    public Properties getClientInfo() {
        return null;
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) {
        return null;
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) {
        return null;
    }

    @Override
    public void setSchema(String schema) {

    }

    @Override
    public String getSchema() {
        return null;
    }

    @Override
    public void abort(Executor executor) {

    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) {

    }

    @Override
    public int getNetworkTimeout() {
        return 0;
    }

    @Override
    public <T> T unwrap(Class<T> iface) {
        return null;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) {
        return false;
    }
}
